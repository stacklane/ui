@import '/base/button_vars';

/**
 * Horizontal, responsible for spacing and other options *between* children.
 */
ui-bar{
  // Important: these are set/reset for every bar instance,
  // so that nested bars have their own default, and don't inherit a parent's values.
  --ui-bar-background: transparent;
  --ui-bar-spacing: var(--ui-s-spacing);

  display: flex;
  background: var(--ui-toolbar-background);
  white-space: nowrap;
  justify-content: flex-start;
  align-items: center;
  flex-shrink: 0;

  // TODO may no longer be necessary due to button related changes.
  max-width:100%; // especially for containing buttons whose text may be very long, the bar width must be restricted, so the button length is also restricted

  &:empty{
    display:none;
  }

  > * {
    margin-left: var(--ui-bar-spacing);
  }

  @include childUncontainedButton{
    margin-left: calc(var(--ui-bar-spacing) / 2);

    @include siblingUncontainedButton{
      margin-left: 0px;
    }
  }

  > *:first-child{
    margin-left: 0px !important;
  }

  &.has-0-spacing{
    --ui-bar-spacing: 0px;
  }
  &.has-spacing{
    --ui-bar-spacing: var(--ui-spacing);
  }
  &.has-s-spacing{
    --ui-bar-spacing: var(--ui-s-spacing);
  }
  &.has-xs-spacing{
    --ui-bar-spacing: var(--ui-xs-spacing);
  }
  &.has-2xs-spacing{
    --ui-bar-spacing: var(--ui-2xs-spacing);
  }

  /**
   * Typically coupled with .is-grow
   */
  &.is-even{
    justify-content: space-between;

    > * {
      margin-left: var(--ui-bar-spacing);
    }
  }

  /**
   * For children which should be vertically the same height.
   */
  &.is-stretch{
    align-items: stretch;
  }

  /**
   * Typically coupled with .is-grow
   */
  &.is-end{
    justify-content: flex-end;
  }

  &.is-grow{
    flex-grow: 1;
  }

  /**
   * 1px line between children
   */
  &.is-separated{
    --ui-bar-separator: var(--ui-separator);

    > *:not(:first-child):before {
      content: "";
      display:inline-block;
      width: 1px;
      background: var(--ui-bar-separator);
      height: 100%;
      position: absolute;
      left: -1px;
    }

    > *:not(:first-child) {
      margin-left: 1px !important;
    }
  }

  /**
   * Path indicator between ui-bar children.
   */
  &.is-path{
    --ui-path-item-arrow-width: 2px;
    --ui-path-item-color: var(--ui-separator);
    --ui-path-item-size: .5rem;

    > *:not(:first-child):before {
      content: "";
      display: inline-block;
      border-right: var(--ui-path-item-arrow-width) solid var(--ui-path-item-color);
      border-top: var(--ui-path-item-arrow-width) solid var(--ui-path-item-color);
      transform: rotate(45deg);

      width: var(--ui-path-item-size);
      height: var(--ui-path-item-size);
      position: absolute;
      left: calc((var(--ui-path-item-size) * 2) * -1);
    }

    > *:not(:first-child) {
      margin-left: calc(var(--ui-bar-spacing) + var(--ui-path-item-size) + (var(--ui-path-item-size) / 2)) !important;
    }
  }
}

/**
 * Vertical, responsible for spacing *between* children.
 */
ui-sidebar{
  --ui-sidebar-background: transparent;
  --ui-sidebar-spacing: var(--ui-s-spacing);

  display: flex;
  flex-direction: column;
  align-items: flex-start;
  flex-shrink: 0;
  background: var(--ui-sidebar-background);

  > *:not(:first-child) {
    margin-top: var(--ui-sidebar-spacing);
  }

  &.has-0-spacing{
    --ui-sidebar-spacing: 0px;
  }
  &.has-spacing{
    --ui-sidebar-spacing: var(--ui-spacing);
  }
  &.has-s-spacing{
    --ui-sidebar-spacing: var(--ui-s-spacing);
  }
  &.has-xs-spacing{
    --ui-sidebar-spacing: var(--ui-xs-spacing);
  }
  &.has-2xs-spacing{
    --ui-sidebar-spacing: var(--ui-2xs-spacing);
  }
}

/**
 * Horizontal, fixed height, typically contains 1 or more <ui-bar>'s.
 *
 * Spacing classes influence fixed height.
 *
 * Use parent <ui-box> for external padding or gutters.
 */
ui-appbar{
  --ui-appbar-spacing: var(--ui-spacing);
  --ui-appbar-height: calc(var(--ui-spacing) * 4);
  --ui-appbar-background: transparent;

  flex-shrink: 0;

  display: flex;

  background: var(--ui-appbar-background);

  white-space: nowrap;
  align-items: center;

  height: var(--ui-appbar-height);

  &.is-stretch{
    align-items: stretch;
  }

  &.has-l-spacing{
    --ui-appbar-spacing: var(--ui-l-spacing);
    --ui-appbar-height: calc(var(--ui-l-spacing) * 4);
  }
  &.has-spacing{
    // by default has-spacing == 16px x 4 == 64px
  }
  &.has-s-spacing{
    --ui-appbar-spacing: var(--ui-s-spacing);
    --ui-appbar-height: calc(var(--ui-s-spacing) * 4);
  }
  &.has-xs-spacing{
    --ui-appbar-spacing: var(--ui-xs-spacing);
    --ui-appbar-height: calc(var(--ui-xs-spacing) * 4);
  }
}
