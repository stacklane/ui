@import '/utils';
@import '/base/button_vars';

/**
 * Automatically applied in UIButtonAction#connectedCallback
 */
[data-ui-button-action='true']{
  display: none;
}

/**
 * https://material-ui.com/components/buttons/
 * https://uxmovement.com/mobile/optimal-size-and-spacing-for-mobile-buttons/
 * https://developer.apple.com/design/human-interface-guidelines/ios/icons-and-images/custom-icons/
 * https://medium.com/@zacdicko/size-matters-accessibility-and-touch-targets-56e942adc0cc
 * https://uxdesign.cc/ui-cheat-sheets-buttons-7329ed9d6112
 */
ui-button, ui-icon-button{
  @include buttonBase;
  @include unselectable;

  border-radius: var(--ui-button-radius);

  &.is-full-width{
    display: flex;
    width: 100%;
  }

  color: var(--ui-default);

  &:hover, &:focus, &:focus-within{
    background: var(--ui-default-alpha-high);
  }

  &:active{
    background: var(--ui-default-alpha-medium);
  }

  &.is-round{
    border-radius: var(--ui-radius-rounded);
  }

  &.is-primary{
    color: var(--ui-primary);

    &:hover, &:focus, &:focus-within{
      background: var(--ui-primary-alpha-high);
    }
    &:active{
      background: var(--ui-primary-alpha-medium);
    }
  }

  &.is-negative{
    color: var(--ui-negative);

    &:hover, &:focus, &:focus-within{
      background: var(--ui-negative-alpha-high);
    }
    &:active{
      background: var(--ui-negative-alpha-medium);
    }
  }

  /**
   * Outlined Appearance
   */
  &.is-outlined{
  //  padding: calc(var(--ui-button-spacing)/2) calc(var(--ui-button-spacing)*2);

    border-color: var(--ui-default-alpha-medium);

    &:hover, &:focus, &:focus-within{
      border-color: var(--ui-default);
    }
    &:active{
      border-color: var(--ui-default);
    }

    &.is-primary{
      border-color: var(--ui-primary-alpha-medium);

      &:hover, &:focus, &:focus-within{
        border-color: var(--ui-primary);
      }
      &:active{
        border-color: var(--ui-primary);
      }
    }

    &.is-negative{
      border-color: var(--ui-negative-alpha-medium);

      &:hover, &:focus, &:focus-within{
        border-color: var(--ui-negative);
      }
      &:active{
        border-color: var(--ui-negative);
      }
    }
  }

  /**
   * Contained / Solid Appearance
   */
  &.is-contained{
   // padding: calc(var(--ui-button-spacing)/2) calc(var(--ui-button-spacing)*2);

    color: var(--ui-default);
    background: var(--ui-default-invert);

    &:hover, &:focus, &:focus-within{
      background: var(--ui-default-dark);
    }
    &:active{
      background: var(--ui-default-darker);
    }

    &.is-primary{
      background: var(--ui-primary);
      color: var(--ui-primary-invert);

      &:hover, &:focus, &:focus-within{
        background: var(--ui-primary-dark);
      }
      &:active{
        background: var(--ui-primary-darker);
      }
    }

    &.is-negative{
      background: var(--ui-negative);
      color: var(--ui-negative-invert);

      &:hover, &:focus, &:focus-within{
        background: var(--ui-negative-dark);
      }
      &:active{
        background: var(--ui-negative-darker);
      }
    }
  }

  /**
   * :focus-within allows focusing input controls within the menu, without closing the menu.
   *
   * https://css-tricks.com/a-css-approach-to-trap-focus-inside-of-an-element/
   */
  &:focus, &:focus-within{
    ui-button-menu{
      pointer-events: auto;
      opacity: 1;
      transform: translateY(0);
      z-index: 9999;
      visibility: visible;
      transition-duration: 0s; // immediately hide
    }
  }
}

/**
 * .has-even-spacing
 */
.--ui-button-has-even-spacing ui-button, ui-button.has-even-spacing{
  padding: var(--ui-button-spacing);
}

/**
 * .is-vertical
 */
.--ui-button-is-vertical ui-button, ui-button.is-vertical{
  flex-direction: column;
  padding: calc(var(--ui-button-spacing));

  ui-icon:first-child{
    margin: 0 0 calc(var(--ui-button-spacing) / 2);
  }
}

ui-button{
  ui-icon:first-child{
    font-size: 1.25rem;
    margin-left: calc(-1 * var(--ui-button-spacing)/2);
    margin-right: calc(var(--ui-button-spacing)/2);
  }
  &.is-round{
    padding-left: calc(var(--ui-button-spacing) * 1.5);
    padding-right: calc(var(--ui-button-spacing) * 1.5);
  }
}

/**
 * Always square.
 *
 * <ui-icon> child is expected to be 1em, and therefore use whatever font-size this is.
 */
ui-icon-button{
  // Utility for current width of THIS button.
  --ui-icon-button-width: calc(2px /*borders*/ + var(--ui-icon-button-size) + (var(--ui-icon-button-spacing) * 2));

  flex: 0 0 auto;

  // Tiniest "usable" size
  &.is-tiny{
    --ui-icon-button-size: 14px;
    --ui-button-spacing: 2px;
  }

  --ui-button-font-size: var(--ui-icon-button-size);
  padding: var(--ui-icon-button-spacing) !important;
  border-radius: var(--ui-icon-button-radius);
}

/**
 * Requires a relative parent/container (ui-button / ui-icon-button)
 */
ui-button-menu{
  --ui-button-menu-background: var(--ui-secondary-background);
  --ui-button-menu-label: var(--ui-label);
  --ui-button-menu-speed: var(--ui-speed);
  --ui-button-menu-radius: var(--ui-radius);

  display: block;
  position: absolute;
  background: var(--ui-button-menu-background);
  color: var(--ui-button-menu-label);
  left: 0;
  overflow: hidden; // clip content inside for rounded corners
  top: 100%; // bottom of parent
  margin-top: 2px; // away from a parent a bit
  min-width: 100%; // at least as wide as parent
  border-radius: var(--ui-button-menu-radius);
  transition-property: opacity, transform;
  transition-duration: var(--ui-button-menu-speed);

  // TBD:
  box-shadow: 0 2px 2px rgba(0,0,0,0.02),0 4px 36px 4px rgba(0,0,0,0.1);

  &.is-over-parent{
    top: -1px;
    left: -1px;
    margin-top: 0px;
  }

  // default, while hidden:
  z-index: -9999;
  pointer-events: none;
  opacity:0;
  transform: translateY(-5px);
  visibility: hidden;
}
