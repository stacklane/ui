@import '/utils';


@mixin control {
  appearance: none;
  border: 0;
  justify-content: flex-start;
  display: inline-flex;
  align-items: center;
  position: relative;
  vertical-align: top;

  &[disabled],
  fieldset[disabled] & {
    cursor: not-allowed;
  }

  &:focus,
  &.is-focused,
  &:active,
  &.is-active {
    outline: none;
  }

  //
  //height: 2.5em;
  //line-height: 1.5;
  //font-size: 1rem;
}


%control {
  @include control;
}


/**
 * https://uxmovement.com/mobile/optimal-size-and-spacing-for-mobile-buttons/
 */
ui-button, ui-menu-button, ui-icon-button{
  @extend %control;
  @extend %unselectable;

  --ui-button-backround: inherit;
  --ui-button-label: inherit;
  --ui-button-radius: var(--ui-radius);
  --ui-button-weight: var(--ui-weight-normal);
  --ui-button-padding-horizontal: var(--ui-s-spacing);
  --ui-button-padding-vertical: calc(var(--ui-button-padding-horizontal)/2);
  --ui-button-hover: var(--ui-selection-background);

  justify-content: center;
  text-align: center;
  white-space: nowrap;

  cursor: var(--ui-action-pointer);

  background: var(--ui-button-backround);
  color: var(--ui-button-label);
  border-radius: var(--ui-button-radius);
  font-weight: var(--ui-button-weight);
  padding: var(--ui-button-padding-vertical) var(--ui-button-padding-horizontal);

  &:hover{
    background: var(--ui-button-hover);
  }

  &:active {
    // in any case, this will break ui-menu-button: filter: brightness(1.25); // ?
  }

  &[disabled] {
    filter: brightness(.25); // opacity instead?
    pointer-events: none !important;
    cursor: not-allowed !important;
  }

  &.is-full-width{
    display: flex;
    width: 100%;
  }
  &.is-justify-left{
    justify-content: left;
    text-align: left;
  }
}

ui-icon-button{

  --ui-button-padding-vertical: var(--ui-button-padding-horizontal);

  > ui-icon {
    --ui-icon-size: 1.5em;
  }

}

ui-menu{
  --ui-menu-background: var(--ui-secondary-background);
  --ui-menu-label: var(--ui-label);
  //--ui-menu-hover-background: var(--ui-link);
  //--ui-menu-hover-label: var(--ui-link-invert);
  --ui-menu-shadow: var(--ui-secondary-background-shadow);
  --ui-menu-speed: var(--ui-speed);

  display: block;
  position: absolute;
  background: var(--ui-menu-background);
  color: var(--ui-menu-label);
  left: 0;
  top: 100%; // bottom of parent
  min-width: 100%; // at least as wide as parent
  box-shadow: 0 0.5em 1em -0.125em var(--ui-menu-shadow), 0 0px 0 1px var(--ui-menu-shadow);
  transition-property: opacity,transform;
  transition-duration: var(--ui-menu-speed);

  // while hidden:
  z-index: -9999;
  pointer-events: none;
  opacity:0;
  transform: translateY(-5px);
}

ui-menu-button{
  position: relative;

  /**
   * :focus-within allows focusing input controls within the menu, without closing the menu.
   *
   * https://css-tricks.com/a-css-approach-to-trap-focus-inside-of-an-element/
   */
  &:focus, &:focus-within{
    background: var(--ui-button-hover);

    ui-menu{
      pointer-events: auto;
      opacity: 1;
      transform: translateY(0);
      z-index: 9999;
    }
  }
}
